package rr_reflection

import (
	"fmt"
	"reflect"

	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

const PluginName = "reflection"

type Plugin struct {
	log     *zap.Logger
	server  *grpc.Server
	plugins []interface{}
}

type Logger interface {
	NamedLogger(name string) *zap.Logger
}

// Plugger interface - –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã RoadRunner –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ —ç—Ç–æ
type Plugger interface {
	PluginsList() []interface{}
}

// Init –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Logger –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ Plugger
func (p *Plugin) Init(log Logger) error {
	p.log = log.NamedLogger(PluginName)
	p.log.Info("REFLECTION PLUGIN INITIALIZED")
	return nil
}

// Collects —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ GRPC
func (p *Plugin) Collects() []interface{} {
	return []interface{}{
		p.collectPlugin,
	}
}

// collectPlugin —Å–æ–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–π –ø–ª–∞–≥–∏–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ gRPC —Å–µ—Ä–≤–µ—Ä
func (p *Plugin) collectPlugin(plugin interface{}) {
	if plugin == nil {
		return
	}

	pluginType := reflect.TypeOf(plugin).String()
	p.log.Debug("collected plugin", zap.String("type", pluginType))

	// –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ *grpc.Server
	if srv, ok := plugin.(*grpc.Server); ok {
		p.server = srv
		p.log.Info("found *grpc.Server directly!")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
	val := reflect.ValueOf(plugin)

	// –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º—ë–Ω –º–µ—Ç–æ–¥–æ–≤
	methodNames := []string{"GRPCServer", "GetServer", "Server", "GetGRPCServer"}

	for _, methodName := range methodNames {
		method := val.MethodByName(methodName)
		if !method.IsValid() {
			continue
		}

		// –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
		results := method.Call(nil)
		if len(results) == 0 {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		if srv, ok := results[0].Interface().(*grpc.Server); ok && srv != nil {
			p.server = srv
			p.log.Info("found gRPC server via method", zap.String("method", methodName))
			return
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
	p.plugins = append(p.plugins, plugin)
}

func (p *Plugin) Serve() chan error {
	errCh := make(chan error, 1)

	p.log.Info("üöÄ REFLECTION SERVE CALLED")

	if p.server == nil {
		p.log.Warn("grpc server not found in collected plugins")
		p.log.Warn("collected plugin types:")
		for i, plugin := range p.plugins {
			p.log.Warn(fmt.Sprintf("  [%d] %T", i, plugin))
		}
		return errCh
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º reflection
	reflection.Register(p.server)
	p.log.Info("GRPC REFLECTION REGISTERED SUCCESSFULLY")

	return errCh
}

func (p *Plugin) Stop() error {
	if p.log != nil {
		p.log.Info("REFLECTION STOPPED")
	}
	return nil
}

func (p *Plugin) Name() string {
	return PluginName
}

func (p *Plugin) Weight() uint {
	return 11
}
